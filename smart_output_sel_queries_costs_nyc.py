import argparse
import math
from smart_util import Util


###########################################################
#  smart_output_sel_queries_costs_nyc.py
#
# Purpose:
#   output the max(avg Â± (0/1/2) * stdev) cost of each sel query to stdout as a row
#
# Arguments:
#   -lsf / --labeled_sel_file  input file that holds sel queries running time generated by smart_label_sel_queries_nyc.py
#   -xt  / --x_tic             the x_tic value for this processed entry
#
# Output:
#     x_tic, sel_1_cost, sel_2_cost, ..., sel_7_cost
#
###########################################################


if __name__ == "__main__":

    # parse arguments
    parser = argparse.ArgumentParser(description="Output sel queries costs.")
    parser.add_argument("-lsf", "--labeled_sel_file",
                        help="labeled_sel_file: input file that holds sel queries running time",
                        type=str, required=True)
    parser.add_argument("-xt", "--x_tic", help="x_tic: the x_tic value for this processed entry",
                        type=str, required=True)
    args = parser.parse_args()

    labeled_sel_queries_file = args.labeled_sel_file
    x_tic = args.x_tic
    n = 0  # TODO - hardcode the n * stdev for now

    # read labeled sel queries into memory
    labeled_sel_queries = Util.load_labeled_sel_queries_file_nyc(labeled_sel_queries_file)

    # compute the average cost for each sel query
    avg_costs = [0.0 for x in range(1, 8)]
    for labeled_sel_query in labeled_sel_queries:
        for fc in range(1, 8):
            avg_costs[fc - 1] += labeled_sel_query["time_sel_" + str(fc)]
    for fc in range(1, 8):
        avg_costs[fc - 1] = avg_costs[fc - 1] / len(labeled_sel_queries)

    # compute standard deviation of cost for each sel query
    std_costs = [0.0 for x in range(1, 8)]
    for labeled_sel_query in labeled_sel_queries:
        for fc in range(1, 8):
            std_costs[fc - 1] += (labeled_sel_query["time_sel_" + str(fc)] - avg_costs[fc - 1]) ** 2
    for fc in range(1, 8):
        std_costs[fc - 1] = math.sqrt(std_costs[fc - 1] / len(labeled_sel_queries))

    # compute the maximum cost (max(|avg-n*std|,|avg+n*std|)) for each sel query
    max_costs = [0.0 for x in range(1, 8)]
    for fc in range(1, 8):
        max_costs[fc - 1] = max(abs(avg_costs[fc - 1] - n * std_costs[fc - 1]),
                                abs(avg_costs[fc - 1] + n * std_costs[fc - 1]))

    # output the maximum cost (max(|avg-n*std|,|avg+n*std|)) of each sel query to stdout
    print(x_tic,
          "{:.4f}".format(max_costs[0]),
          "{:.4f}".format(max_costs[1]),
          "{:.4f}".format(max_costs[2]),
          "{:.4f}".format(max_costs[3]),
          "{:.4f}".format(max_costs[4]),
          "{:.4f}".format(max_costs[5]),
          "{:.4f}".format(max_costs[6]),
          sep=",    "
          )




